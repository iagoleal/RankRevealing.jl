var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#PLUQ-decomposition","page":"Reference","title":"PLUQ decomposition","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"PLUQ\npluq","category":"page"},{"location":"reference/#RankRevealing.PLUQ","page":"Reference","title":"RankRevealing.PLUQ","text":"PLUQ <: Factorizarion\n\nMatrix factorization type for the full LU factorization of any rectangular matrix A over an arbitrary numeric field. This is the return type of pluq.\n\nThe factorization satisfies\n\nP * [L ; M] * [U V] * Q == A\n\nComponent Description\nF.L Full-rank unit lower triangular part\nF.U Full-rank upper triangular part\nF.M Remainder of the row dimension\nF.V Remainder of the column dimension\nF.P row-wise permutation Matrix\nF.Q column-wise permutation Matrix\nF.p row-wise permutation Vector\nF.q column-wise permutation Matrix\n\nIteration and destructuring produce the components in the order p, L, U, V, M, q`.\n\nBoth L and U are square full-rank matrices with the same rank as A.\n\n\n\n\n\n","category":"type"},{"location":"reference/#RankRevealing.pluq","page":"Reference","title":"RankRevealing.pluq","text":"pluq(A) -> PLUQ\n\nPerform a rank-sensitive LU factorization of A. The factorization of an n by m matrix is computed in O(n m r^(ω-2)) steps, where r = rank(A) and ω is the matrix multiplication complexity exponent.\n\nThis is an exact function who should work with any type implementing the basic arithmetic operations +, -, *, /, one, zero.\n\nThe resulting factorization F satisfies\n\nF.P * [F.L ; F.M] * [F.U F.V] * F.Q == A\n\nSee the link for the original description of the algorithm.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Generalized-Rank-Revealing-decomposition","page":"Reference","title":"Generalized Rank Revealing decomposition","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"GeneralizedRankRevealing\ngrr\nsimple_rr\nleft_rr\nright_rr","category":"page"},{"location":"reference/#RankRevealing.GeneralizedRankRevealing","page":"Reference","title":"RankRevealing.GeneralizedRankRevealing","text":"GeneralizedRankRevealing <: Factorization\n\nMatrix factorization type for the Generalized Rank Reveling decomposition of two matrices A and B with the same number of columns. This is obtained via the function grr(A,B).\n\nBy calling d_+ the dimension of the sum of A and B row spaces, this factorization has the decomposes the matrices as\n\n                | I 0 0 |\n| A | = | X 0 | | 0 0 I |\n| B |   | 0 Y | | 0 I 0 | H\n                | 0 0 I |\n\nComponent Description\nF.X m_A x r_A full column rank matrix\nF.Y m_B x r_B full column rank matrix\nF.H d_+ x n full row rank matrix\n\nOther useful fields are:\n\nF.r1: Rank of A minus minus the intersection\nF.r2: Rank of B minus minus the intersection\nF.r3: Rank of the intersection\n\n\n\n\n\n","category":"type"},{"location":"reference/#RankRevealing.grr","page":"Reference","title":"RankRevealing.grr","text":"grr(A, B) -> GeneralizedRankRevealing\n\nCompute the Generalized LU decomposition of matrices A and B. There are matrices X, Y and H such that\n\n                | I 0 0 |\n| A | = | X 0 | | 0 0 I |\n| B |   | 0 Y | | 0 I 0 | H\n                | 0 0 I |\n\n\n\n\n\n","category":"function"},{"location":"reference/#RankRevealing.simple_rr","page":"Reference","title":"RankRevealing.simple_rr","text":"simple_rr(A)\n\nDecompose A == X*H where X is full column rank and H is full row rank.\n\n\n\n\n\n","category":"function"},{"location":"reference/#RankRevealing.left_rr","page":"Reference","title":"RankRevealing.left_rr","text":"left_rr(A)\n\nDecompose A == X*[I ; 0]*H where X is invertible and H is full row rank.\n\n\n\n\n\n","category":"function"},{"location":"reference/#RankRevealing.right_rr","page":"Reference","title":"RankRevealing.right_rr","text":"right_rr(A)\n\nDecompose A == X*[0 I]*H where X is full column rank and H is invertible.\n\n\n\n\n\n","category":"function"},{"location":"reference/#Working-with-subspaces","page":"Reference","title":"Working with subspaces","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"basis\nintersection\nsumspace","category":"page"},{"location":"reference/#RankRevealing.basis","page":"Reference","title":"RankRevealing.basis","text":"basis(xs)\n\nTurn a set of vectors into a set of linearly independet vectors spawning the same subspace.\n\nWarning: Even if the input is already linearly independent,              the returned basis may be composed of other vectors              spawning the same subspace.\n\n\n\n\n\n","category":"function"},{"location":"reference/#RankRevealing.intersection","page":"Reference","title":"RankRevealing.intersection","text":"intersection(xs, ys) -> vs\n\nGiven two sets of vectors, calculate a basis for the intersection of the subspaces generated by them.\n\n\n\n\n\n","category":"function"},{"location":"reference/#RankRevealing.sumspace","page":"Reference","title":"RankRevealing.sumspace","text":"sumspace(xs, ys) -> vs\n\nGiven two sets of vectors, calculate a basis for the sum space of the subspaces generated by them.\n\n\n\n\n\n","category":"function"},{"location":"#RankRevealing.jl","page":"RankRevealing.jl","title":"RankRevealing.jl","text":"","category":"section"},{"location":"","page":"RankRevealing.jl","title":"RankRevealing.jl","text":"CurrentModule = RankRevealing","category":"page"},{"location":"","page":"RankRevealing.jl","title":"RankRevealing.jl","text":"This package defines methods for exact linear algebra over any numerical field. Our focus is on matrix decompositions that are rank-sensitive. That is, faster for low-rank matrices.","category":"page"},{"location":"","page":"RankRevealing.jl","title":"RankRevealing.jl","text":"","category":"page"},{"location":"#References","page":"RankRevealing.jl","title":"References","text":"","category":"section"},{"location":"","page":"RankRevealing.jl","title":"RankRevealing.jl","text":"[1] Jean-Guillaume Dumas, Clément Pernet, Ziad Sultan. \"Simultaneous computation of the row and column rank profiles\". In: Proceedings of the 38th International Symposium on Symbolic and Algebraic Computation. 2013, pp. 181–188.\n[2] Iago Leal de Freitas, João Paixão, Lucas Rufino, and Pawelł Sobocínski. \"Rank sensitive complexity to find the intersection between two subspaces\". 2022 (upcoming)","category":"page"}]
}
